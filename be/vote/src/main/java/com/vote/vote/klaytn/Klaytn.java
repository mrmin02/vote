package com.vote.vote.klaytn;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crpyto.KlayCredentials;
import com.klaytn.caver.fee.FeePayerManager;
import com.klaytn.caver.methods.response.KlayTransactionReceipt;
import com.klaytn.caver.tx.gas.DefaultGasProvider;
import com.klaytn.caver.tx.manager.TransactionManager;
import com.klaytn.caver.tx.model.SmartContractDeployTransaction;
import com.klaytn.caver.tx.model.SmartContractExecutionTransaction;
import com.klaytn.caver.utils.ChainId;
import com.vote.vote.klaytn.smartContract.RIROVote3;
import com.vote.vote.klaytn.smartContract.Test6;

// import org.springframework.boot.configurationprocessor.json.JSONObject;
import org.json.simple.JSONObject;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.utils.Numeric;

import org.json.simple.JSONArray;




//import org.web3j.rlp.*;
public class Klaytn {

	
	public JSONObject klaytnDeploy3() throws Exception{
		String sendUser = "0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0"; 
	
		String feeUser = "0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2"; 
		// 수수료 부담하는 사람  Private Key
	
		// 스마트컨트랙트 정보
		String data= "";
	
	
		
		// caver & 계정 로드
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		KlayCredentials sender = KlayCredentials.create(sendUser);
		
		// SmartContracdeployTransaction 생성
		SmartContractDeployTransaction smartContractDeployTransaction = SmartContractDeployTransaction.create(
				sender.getAddress(), // 컨트렉트를 배포하고자 하는 계정의 주소
				BigInteger.ZERO, 
				Numeric.hexStringToByteArray(data), 
				new DefaultGasProvider().getGasLimit(), 
				BigInteger.ZERO);
		
		// sender의 계정으로 TransactionManager 인스턴스 생성
		TransactionManager txManager
			= new TransactionManager
				.Builder(caver, sender)
				.setChaindId(ChainId.BAOBAB_TESTNET).build();
		
		String senderRawTransaction
			= txManager.sign(smartContractDeployTransaction, true).getValueAsString();
		
		KlayCredentials feePayer = KlayCredentials.create(feeUser);
		
		FeePayerManager feePayerManager
			= new FeePayerManager.Builder(caver,  feePayer)
				.setChainId(ChainId.BAOBAB_TESTNET).build();
		KlayTransactionReceipt.TransactionReceipt transactionReceipt 
			= feePayerManager.executeTransaction(senderRawTransaction);
		
		String txHash = transactionReceipt.getTransactionHash(); 
		String deployedContractAddress = transactionReceipt.getContractAddress();
		String errorMessage = transactionReceipt.getErrorMessage();
		
		System.out.println("txHash : "+txHash);
		System.out.println("deployedContractAddress : " + deployedContractAddress);
		System.out.println("errorMessage : " + errorMessage);
	
		JSONObject result = new JSONObject();
		result.put("address",deployedContractAddress);
		return result;
	}


	public JSONObject klaytnSend3(String address, long time, int age, int gender, int select )throws Exception{ 
		Caver caver = Caver.build(Caver.BAOBAB_URL);

		KlayCredentials sender = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");
		//
//			byte[] byteArray=str.getBytes();
		
//			byte[] byteArray2 = "1212".getBytes();
//			String hexValue = javax.xml.bind.DatatypeConverter.printHexBinary(byteArray2);
		
		
		//Input byte array must be in range 0 < M <= 32 and length must match type 오류남.
		// 자바에선 16 비트 ? 로 바꿔서 길이가 63 ? 64 인데 , bytes32 에서는 길이를 32 까지 허용하니, 길이 오류가 남.
		
		// 파라메터 1 : 1: klay ? gass , 2: nowTime,   3:age, 4: gender, last: Seleted

		System.out.println("----------------------------------------send");
		Function function = new Function(
			RIROVote3.FUNC_TRANSFERWITHDATA,  // FUNC_TRANSFER = "transfer"
		        Arrays.asList(
		        		
						new Uint256(BigInteger.ZERO),
						new Uint256(time),
						new Uint256(age),
						new Uint256(gender),
						new Uint256(select)
						
		        		
		        		),  // inputParameters
		        Collections.emptyList()  // outputParameters          
		);
		String data = FunctionEncoder.encode(function);
		
		TransactionManager txManager = new TransactionManager.Builder(caver, sender)
                .setChaindId(ChainId.BAOBAB_TESTNET).build();
		
		System.out.println("----------------------------------------send 1");

		SmartContractExecutionTransaction smartContractExecutionTransaction
			= SmartContractExecutionTransaction.create(
				sender.getAddress(),//만드는 User 의 address
				address,
		        BigInteger.ZERO,
		        Numeric.hexStringToByteArray(data),       
//			        sendData, //전송할 데이터
		        new DefaultGasProvider().getGasLimit(Test6.FUNC_TRANSFER)
//			        BigInteger.valueOf(100_000)
		);
		System.out.println("smartContractExecutionTransaction:" +smartContractExecutionTransaction);
		String rawTransaction
		        = txManager.sign(smartContractExecutionTransaction, true).getValueAsString();
				System.out.println("----------------------------------------send 2");
		KlayCredentials feePayer = KlayCredentials.create("0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2");// 수수료 부담하는 사람의 private key
		FeePayerManager feePayerManager
		        = new FeePayerManager.Builder(caver, feePayer)
		        		.build();
//			                .setChainId(ChainId.BAOBAB_TESTNET).build();
		//Sync : FeePayer ExecuteTx

		System.out.println("----------------------------------------send 3");

		KlayTransactionReceipt.TransactionReceipt transactionReceipt 
			= feePayerManager.executeTransaction(rawTransaction);
		String errorMessage = transactionReceipt.getErrorMessage();
		String txHash = transactionReceipt.getTransactionHash();
		
		System.out.println("txHash: "+txHash);
		System.out.println("errorMessage : "+ errorMessage);

		System.out.println("----------------------------------------send 4");
		JSONObject json = new JSONObject();
		json.put("hash",txHash);
		return json;
	}
	
	
	public JSONObject klaytnSetOptions2(String address, long startTime, long endTime, int limit) throws Exception{
		Caver caver = Caver.build(Caver.BAOBAB_URL);

		KlayCredentials sender = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");
		//
//			byte[] byteArray=str.getBytes();
		
//			byte[] byteArray2 = "1212".getBytes();
//			String hexValue = javax.xml.bind.DatatypeConverter.printHexBinary(byteArray2);
		
		
		//Input byte array must be in range 0 < M <= 32 and length must match type 오류남.
		// 자바에선 16 비트 ? 로 바꿔서 길이가 63 ? 64 인데 , bytes32 에서는 길이를 32 까지 허용하니, 길이 오류가 남.
		
	//uint _startTime, uint _endTime, uint _limit, uint _state, uint _resultTime  
	// 1. 시작시간, 2. 마감시간, 3. 후보수, 
		Function function = new Function(
			RIROVote3.FUNC_SETOPTIONS,  // FUNC_TRANSFER = "transfer"
		        Arrays.asList(
		        		
		        		new Uint256(startTime),
						new Uint256(endTime),
						new Uint256(limit)
		        		
		        		),  // inputParameters
		        Collections.emptyList()  // outputParameters          
		);
		String data = FunctionEncoder.encode(function);
		
		TransactionManager txManager = new TransactionManager.Builder(caver, sender)
                .setChaindId(ChainId.BAOBAB_TESTNET).build();
		
		SmartContractExecutionTransaction smartContractExecutionTransaction
			= SmartContractExecutionTransaction.create(
				sender.getAddress(),//만드는 User 의 address
				address,
		        BigInteger.ZERO,
		        Numeric.hexStringToByteArray(data),       
//			        sendData, //전송할 데이터
		        new DefaultGasProvider().getGasLimit(Test6.FUNC_TRANSFER)
//			        BigInteger.valueOf(100_000)
		);
		System.out.println("smartContractExecutionTransaction:" +smartContractExecutionTransaction);
		String rawTransaction
		        = txManager.sign(smartContractExecutionTransaction, true).getValueAsString();
		
		KlayCredentials feePayer = KlayCredentials.create("0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2");// 수수료 부담하는 사람의 private key
		FeePayerManager feePayerManager
		        = new FeePayerManager.Builder(caver, feePayer)
		        		.build();
//			                .setChainId(ChainId.BAOBAB_TESTNET).build();
		//Sync : FeePayer ExecuteTx
		KlayTransactionReceipt.TransactionReceipt transactionReceipt 
			= feePayerManager.executeTransaction(rawTransaction);
			// transactionReceipt.get
		String errorMessage = transactionReceipt.getErrorMessage();
		String txHash = transactionReceipt.getTransactionHash();
		
		System.out.println("txHash: "+txHash);
		System.out.println("errorMessage : "+ errorMessage);

		JSONObject json = new JSONObject();
		json.put("hash",txHash);
		return json;
	}
	public JSONArray load3(String address) throws Exception{// 배포된 스마트 컨트렉트의 uint List 출력, count 출력 
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		
		KlayCredentials credentials = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");
		
//			0xcc1b2b7db95514cced8b7dcb169470eeda34ca76    -  대납
		RIROVote3 eeToken = RIROVote3.load(
//					"0x7b6c602b7e8dde60f16ec0684421d69868215f25",// 콘트렉트 adress 
//					"0x3970bec0c994b437d4bb2ccc277e965ce24f9ff6",
//					"0xb9be5c12aaf13a18e866883fccfa3327283d4891",
				// "0x3caef473574f6a9de0501d3073c5300e5a05ed1d",
				address,
				caver, 
				credentials, 
				ChainId.BAOBAB_TESTNET,
				new DefaultGasProvider());

		JSONArray json = new JSONArray();

		try{
			RemoteCall<Tuple9<List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, BigInteger>> remoteCall 
			= eeToken.getListTotal();
			
		Tuple9<List<BigInteger>,List<BigInteger>,List<BigInteger>,List<BigInteger>,List<BigInteger>,List<BigInteger>,List<BigInteger>,List<BigInteger>,BigInteger> result = remoteCall.send();
		
		List<BigInteger> voteResult = result.getValue1();
		List<BigInteger> voteAge1 = result.getValue2();
		List<BigInteger> voteAge2 = result.getValue3();
		List<BigInteger> voteAge3 = result.getValue4();
		List<BigInteger> voteAge4 = result.getValue5();
		List<BigInteger> voteAge5 = result.getValue6();
		List<BigInteger> voteGender0 = result.getValue7();
		List<BigInteger> voteGender1 = result.getValue8();
		BigInteger count = result.getValue9();


		

		json.add(0, voteResult);


		JSONObject age = new JSONObject();

		for (int i=1; i<=voteResult.size(); i++){
			ArrayList data = new ArrayList();
			
			data.add(voteAge1.get(i-1));
			data.add(voteAge2.get(i-1));
			data.add(voteAge3.get(i-1));
			data.add(voteAge4.get(i-1));
			data.add(voteAge5.get(i-1));

			age.put(i,data);
		}
		json.add(1,age);

		JSONObject gender = new JSONObject();

		for (int i=0; i<voteResult.size(); i++){
			ArrayList data = new ArrayList();
			
			data.add(voteGender0.get(i));
			data.add(voteGender1.get(i));
			

			gender.put(i+1,data);
		}

		json.add(2,gender);
		json.add(3,count);




		}catch(Exception e){
			e.printStackTrace();
		}
			
		// json.put("count",eeToken.getCount().send());
		return json;
	}

}
// 

