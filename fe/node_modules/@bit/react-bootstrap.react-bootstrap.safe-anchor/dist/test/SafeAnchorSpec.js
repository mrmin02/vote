"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _SafeAnchor = _interopRequireDefault(require("../src/SafeAnchor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('SafeAnchor', function () {
  it('renders an anchor tag', function () {
    (0, _enzyme.mount)(_react.default.createElement(_SafeAnchor.default, null)).getDOMNode().tagName.should.equal('A');
  });
  it('forwards provided href', function () {
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      href: "http://google.com"
    })).find('a').prop('href').should.equal('http://google.com');
  });
  it('ensures that an href is provided', function () {
    (0, _enzyme.mount)(_react.default.createElement(_SafeAnchor.default, null)).getDOMNode().hasAttribute('href').should.be.true;
  });
  it('forwards onClick handler', function () {
    var handleClick = sinon.spy();
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      onClick: handleClick
    })).find('a').simulate('click', {
      preventDefault: function preventDefault() {}
    });
    handleClick.should.have.been.calledOnce;
  });
  it('provides onClick handler as onKeyDown handler for "space"', function () {
    var handleClick = sinon.spy();
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      onClick: handleClick
    })).find('a').simulate('keyDown', {
      key: ' ',
      preventDefault: function preventDefault() {}
    });
    handleClick.should.have.been.calledOnce;
  });
  it('prevents default when no href is provided', function () {
    var handleClick = sinon.spy();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_SafeAnchor.default, {
      onClick: handleClick
    }));
    wrapper.find('a').simulate('click');
    wrapper.setProps({
      href: '#'
    }).find('a').simulate('click');
    expect(handleClick).to.have.been.calledTwice;
    expect(handleClick.getCall(0).args[0].isDefaultPrevented()).to.be.true;
    expect(handleClick.getCall(1).args[0].isDefaultPrevented()).to.be.true;
  });
  it('does not prevent default when href is provided', function () {
    var handleClick = sinon.spy();
    (0, _enzyme.mount)(_react.default.createElement(_SafeAnchor.default, {
      href: "#foo",
      onClick: handleClick
    })).find('a').simulate('click');
    expect(handleClick).to.have.been.calledOnce;
    expect(handleClick.getCall(0).args[0].isDefaultPrevented()).to.be.false;
  });
  it('Should disable link behavior', function () {
    var clickSpy = sinon.spy();
    var spy = sinon.spy(_SafeAnchor.default.prototype, 'handleClick');
    (0, _enzyme.mount)(_react.default.createElement(_SafeAnchor.default, {
      disabled: true,
      href: "#foo",
      onClick: clickSpy
    }, "Title")).simulate('click');
    expect(spy).to.have.been.calledOnce;
    expect(clickSpy).to.have.not.been.called;
    expect(spy.getCall(0).args[0].isDefaultPrevented()).to.equal(true);
    expect(spy.getCall(0).args[0].isPropagationStopped()).to.equal(true);
  });
  it('forwards provided role', function () {
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      role: "test"
    })).find('a').prop('role').should.equal('test');
  });
  it('forwards provided role with href', function () {
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      role: "test",
      href: "http://google.com"
    })).find('a').prop('role').should.equal('test');
  });
  it('set role=button with no provided href', function () {
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, null)).find('a').prop('role').should.equal('button');
    (0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      href: "#"
    })).find('a').prop('role').should.equal('button');
  });
  it('sets no role with provided href', function () {
    expect((0, _enzyme.shallow)(_react.default.createElement(_SafeAnchor.default, {
      href: "http://google.com"
    })).find('a').prop('role')).to.not.exist;
  });
});

//# sourceMappingURL=SafeAnchorSpec.js.map