"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _chart = _interopRequireDefault(require("chart.js"));

var _resolveOptions = _interopRequireDefault(require("./resolveOptions"));

var _resolveDatasets = _interopRequireDefault(require("./resolveDatasets"));

var _container = _interopRequireDefault(require("./styled/container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * The Chart components are based on Charts.js an open source HTML5 based charting library.
 * You can learn more about it here:
 * @category DataView
 */
var Chart =
/*#__PURE__*/
function (_Component) {
  _inherits(Chart, _Component);

  function Chart(props) {
    var _this;

    _classCallCheck(this, Chart);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));
    _this.chartRef = _react["default"].createRef();
    _this.datasets = [];
    return _this;
  }

  _createClass(Chart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var children = this.props.children;
      this.datasets = (0, _resolveDatasets["default"])(children);
      this.renderChart();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var children = this.props.children;
      this.datasets = (0, _resolveDatasets["default"])(children);
      this.updateChart();
    }
  }, {
    key: "updateChart",
    value: function updateChart() {
      var _this$props = this.props,
          labels = _this$props.labels,
          conditions = _objectWithoutProperties(_this$props, ["labels"]);

      this.chartInstance.data = {
        labels: labels,
        datasets: this.datasets
      };
      this.chartInstance.options = (0, _resolveOptions["default"])(_objectSpread({}, conditions));
      this.chartInstance.update();
    }
  }, {
    key: "renderChart",
    value: function renderChart() {
      var _this$props2 = this.props,
          type = _this$props2.type,
          labels = _this$props2.labels,
          conditions = _objectWithoutProperties(_this$props2, ["type", "labels"]);

      var node = this.chartRef.current;
      this.chartInstance = new _chart["default"](node, {
        type: type,
        data: {
          labels: labels,
          datasets: this.datasets
        },
        options: (0, _resolveOptions["default"])(_objectSpread({}, conditions))
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          className = _this$props3.className;
      return _react["default"].createElement(_container["default"], {
        className: className,
        style: style
      }, _react["default"].createElement("canvas", {
        ref: this.chartRef
      }));
    }
  }]);

  return Chart;
}(_react.Component);

exports["default"] = Chart;
Chart.propTypes = {
  /** The type of chart to draw. */
  type: _propTypes["default"].oneOf(['bar', 'horizontalBar', 'line', 'radar', 'pie', 'doughnut', 'polarArea', 'bubble']),

  /** Defines the names of the sections for the corresponding values. */
  labels: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Determines whether to show the stacked bars in a bar chart. */
  showStacked: _propTypes["default"].bool,

  /** Defines if the legend is shown. */
  showLegend: _propTypes["default"].bool,

  /** The position of the legend. */
  legendPosition: _propTypes["default"].oneOf(['top', 'bottom', 'right', 'left']),

  /** Determines whether it should perform animations when rendering the chart,
   * this would improve general performance
   * and is recommended for high data volumes charts. */
  disableAnimations: _propTypes["default"].bool,

  /** Determines whether to draw the lines that join the dots in a line chart,
   * is recommended for high data volumes charts. */
  disableLines: _propTypes["default"].bool,

  /** Determines whether the lines that join the dots in a
   * line chart should be curved or straight.  */
  disableCurves: _propTypes["default"].bool,

  /** Maintain the original canvas aspect ratio. */
  maintainAspectRatio: _propTypes["default"].bool,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node
};
Chart.defaultProps = {
  type: 'bar',
  labels: [],
  showStacked: false,
  showLegend: true,
  legendPosition: 'bottom',
  disableAnimations: false,
  disableLines: false,
  disableCurves: false,
  maintainAspectRatio: true,
  className: undefined,
  style: undefined,
  children: undefined
};

//# sourceMappingURL=index.js.map