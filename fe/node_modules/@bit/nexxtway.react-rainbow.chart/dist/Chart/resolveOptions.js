"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = resolveOptions;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function resolveOptions(conditions) {
  var disableAnimations = conditions.disableAnimations,
      disableLines = conditions.disableLines,
      disableCurves = conditions.disableCurves,
      showLegend = conditions.showLegend,
      legendPosition = conditions.legendPosition,
      showStacked = conditions.showStacked,
      maintainAspectRatio = conditions.maintainAspectRatio;
  var options = {
    maintainAspectRatio: maintainAspectRatio,
    legend: {
      display: showLegend,
      position: legendPosition,
      fullWidth: true,
      labels: {
        usePointStyle: true
      }
    }
  };

  if (disableAnimations) {
    options = _objectSpread({}, options, {
      animation: {
        duration: 0
      },
      hover: {
        animationDuration: 0
      },
      responsiveAnimationDuration: 0
    });
  }

  if (disableLines) {
    options = _objectSpread({}, options, {
      showLines: false
    });
  }

  if (disableCurves) {
    options = _objectSpread({}, options, {
      elements: {
        line: {
          tension: 0
        }
      }
    });
  }

  if (showStacked) {
    options = _objectSpread({}, options, {
      scales: {
        xAxes: [{
          stacked: true
        }],
        yAxes: [{
          stacked: true
        }]
      }
    });
  }

  return options;
}

//# sourceMappingURL=resolveOptions.js.map