"use strict";

var _createChainedFunction = _interopRequireDefault(require("../../src/utils/createChainedFunction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-new-func: 0 */
describe('createChainedFunction', function () {
  it('returns null with no arguments', function () {
    expect((0, _createChainedFunction.default)()).to.equal(null);
  });
  it('returns original function when single function is provided', function () {
    var func1 = sinon.stub();
    (0, _createChainedFunction.default)(func1).should.equal(func1);
  });
  it('wraps two functions with another that invokes both when called', function () {
    var func1 = sinon.stub();
    var func2 = sinon.stub();
    var chained = (0, _createChainedFunction.default)(func1, func2);
    chained.should.not.equal(func1).and.should.not.equal(func2);
    func1.should.not.have.been.called;
    func2.should.not.have.been.called;
    chained();
    func1.should.have.been.calledOnce;
    func2.should.have.been.calledOnce;
  });
  it('wraps multiple functions and invokes them in the order provided', function () {
    var results = [];

    var func1 = function func1() {
      return results.push(1);
    };

    var func2 = function func2() {
      return results.push(2);
    };

    var func3 = function func3() {
      return results.push(3);
    };

    var chained = (0, _createChainedFunction.default)(func1, func2, func3);
    chained();
    results.should.eql([1, 2, 3]);
  });
  it('forwards arguments to all chained functions', function () {
    var in1 = 'herpa derpa';
    var in2 = {
      herpa: 'derpa'
    };

    var func = function func(arg1, arg2) {
      arg1.should.equal(in1);
      arg2.should.equal(in2);
    };

    var chained = (0, _createChainedFunction.default)(func, func, func);
    chained(in1, in2);
  });
  it('throws when func is not provided', function () {
    expect(function () {
      (0, _createChainedFunction.default)({
        herpa: 'derpa'
      });
    }).to.throw(/Invalid Argument Type/);
  });
  it('works with new Function call', function () {
    var results = [];
    var func1 = new Function('results', 'results.push(1);');
    var func2 = new Function('results', 'results.push(2);');
    var chained = (0, _createChainedFunction.default)(func1, func2);
    chained(results);
    results.should.eql([1, 2]);
  });
});

//# sourceMappingURL=createChainedFunctionSpec.js.map